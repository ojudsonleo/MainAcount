# TODO: Lambda Function
import time

a = [1, 23, 4, 5, 6, 7, 8, 9]

def n1090(port=1240778, xrange=0, x=0, inculde="*"):
    n1260 = lambda x: x+5
    return n1260(x) + 85 + xrange + x + 9000000000000
    print("port: " + port)
    print("xrange: " + xrange)
    print("x: " + x)
    print("inculdes: " + inculde)    
        



class _Private:
    def __init__(self, name):
        self.name = name
            
li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

def Library():
    def storage(x):
        prosess()
    
    def prosess():
        return x + 106 + 10
            
    print(storage(x) for x in li) 
def message():
    print("not use this command dog.li")

    print("not use this command tiger.li")

    print("not use this command snake.li")

    print("not use this command Lion.li")

    print("go to help to find the commands")
    
    print("")

def finddateandtimeandday():
    print(time.ctime())
    
class person(object):
    
    population = "colling.."
    
    storage = [12, frozenset, float, staticmethod, complex, classmethod, staticmethod, dict, object, slice, copyright, super, tuple, enumerate]
    
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    @classmethod
    def execute_storage(cls):
        return cls.storage
    
    @classmethod
    def getPopulation(cls):
        return cls.population
    
    @staticmethod
    def isAdult(age):
        return age >= 18
    
    @staticmethod
    def isman(age):
        return age >= 40
    
    @staticmethod
    def isChild(age):
        return age <= 10
    
    def display(self):
        print(self.name, 'is ',  self.age, 'year old')
    
    
class car(object):
    def __init__(self, make, model, year, condition="New", kms=0):
        self.make = make
        self.model = model
        self.year = year
        self.condition = condition
        self.kms = kms
        

    
    def display(self, showAll=True):
        if showAll:
            print("this car %s %s from %s, it is %s and has %s kms." % (self.make, self.model, self.year, self.condition, self.kms))
        else:
            print("this car is a %s %s from %s." % (self.make, self.model, self.year))
    
    
    
class sLib(object):
    def library(self, word="", add=0, freq=1):
        print(word * (freq + add))
    
    
    
def help():
    
    print("commands:")
    
    print("         frist write this from judson import *")
    
    print("         library.message()")
    
    print("         Dog = library.Lib.dog(name)")
    
    print("         Dog.num_dogs()")
    
    print("         Dog.bark(number of times it should say bark)")
    
    print("         print(Lib.Dog.bark)")
    
    print("         test = library.NotPrivate(name)")
    
    print("         test._display()")
    
    print("         test.display()")
    
    print("         test.priv()")
    
    print("         name1 = sLib.Library(word, add, freq)")
    
    print("         name = library.Point(number, number)")
    
    print("         name2 = library.Point(number, number)")
    
    print("         print(name>name2)")
    
    print("         print(name<=name2)")
    
    print("         print(name>=name2)")
    
    print("         print(name==name2)")
    
    print("         print(name+name2)")
    
    print("         print(name-name2)")
    
    print("         print(name*name2)")
    
    print("         dog = library.Dog(name, age)")
    
    print("         dog.speak()")
    
    print("         dog.talk()")
    
    print("         cat = library.Cat(name, age, color)")
    
    print("         cat.speak()")
    
    print("         cat.talk()")
    
    print("         lion = library.Lion(name, age)")
    
    print("         lion.speak()")
    
    print("         lion.talk()")
    
    print("         snake = library.tiger(name, age)")
    
    print("         snake.speak()")
    
    print("         snake.talk()")
    
    print("         whip = car(make, model, year, condition, kms)")
    
    print("         whip.display()")

    print("         whip.display(True)")
    
    print("         whip.display(False)")
    
    print("         newPerson = library.person('personname', age)")
    
    print("         print(newPerson.execute_storage())")
    
    print("         print(newPerson.isAdult())")
    
    print("         print(newPerson.display())")
    print("         finddateandtimeandday()")
    
    
class Dog(object):
    
    def add_weight(self, weight):
    
        self.weight = weight
    
    def __init__(self, name, age):
    
        self.name = name
    
        self.age = age
    
        self.li = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
                       58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 77, 78, 78, 79, 79,
                       80, 81, 81, 82, 83, 83, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 90, ]
    
    def speak(self):
        print("Hi i am", self.name, "and i am", self.age, "years old and i am a Dog")
    
    def talk(self):
        print("Bark!")
    
    
class Cat(Dog):
    def __init__(self, name, age, color):
        super().__init__(name, age)
        self.color = color
    
    def speak(self):
        print("Meow  Hi i am", self.name, "and i am", self.age, "years old and i am a Cat")
    
    def talk(self):
        print("Meow!")
    
            # time = 2:57:08 / 6:21:12
    
    
class Lion(Dog):
        # TODO: Lion class
    def __init__(self, name, age):
        super().__init__(name, age)
    
    def talk(self):
        print("kkkk!")
    
    def speak(self):
        print("Hi i am", self.name, "and i am", self.age, "years old and i am a Lion i will eat every animal")
    
    
class snake(Dog):
    def __init__(self, name, age):
        super().__init__(name, age)
    
    def speak(self):
        print("sss Hi i am", self.name, "and i am", self.age, "years old and i am a snake")
    
    def talk(self):
        print("ssssssss!")
    
    
class tiger(Dog):
    def __init__(self, name, age):
    
        super().__init__(name, age)
    
    def talk(self):
    
        print("KKKKKKKKKK!")
    
    def speak(self):
    
        print("Hi i am", self.name, "and i am", self.age, "years old and i am a tiger and i will also eat every animal")
    
    
class Point(object):
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
        self.coords = (self.x, self.y)
    
    def move(self, x, y):
        self.x += x
        self.y += y
    
    def __add__(self, p):
        return Point(self.x + p.x + self.y + p.x)
    
    def __sub__(self, p):
        return Point(self.x - p.x - self.y - p.x)
    
    def __mul__(self, p):
        return self.x * p.x + self.y * p.y
    
    def length(self):
        import math
        return math.sqrt(self.x ** 2 + self.y ** 2)
    
    def __gt__(self, p):
        return self.length() > p.length()
    
    def __ge__(self, p):
        return self.length() >= p.length()
    
    def __lt__(self, p):
        return self.length() < p.length()
    
    def __le__(self, p):
        return self.length() <= p.length()
    
    def __eq__(self, p):
        return self.x == p.x and self.y == p.y
    
    def __str__(self):
        return "Point(x=" + str(self.x) + "," + "y=" + str(self.y) + ")"
    
    
    
    
            
class NotPrivate:
    def __init__(self, name):
        self.name = name
        self.priv = _Private(name)
    
    def _display(self):
        print("hello")
    
    def display(self):
        print("hi")
    
    
class Lib(object):
    class Dog:
        dogs = []
    
        def __init__(self, name):
                self.name = name
                self.dogs.append(self)
    
        @classmethod
        def num_dogs(cls):
            return len(cls.dogs)
    
        @staticmethod
        def bark(n):
            """barks n times"""
            for _ in range(n):
                print("Bark!")
    
class Car(object):
    def __init__(self, make, model, year, condition, kms):
        self.make = make
        self.model = model
        self.year = year
        self.condition = condition
        self.kms = kms
    
    def display(self,
                showAll
                ):
        if showAll:
            print("this car %s %s from %s, it is  %s and has %s kms." % (self.make, self.model, self.year, self.condition, self.kms))
        else:
            print("this car is a %s %s from %s." % (self.make, self.model, self.year))



def add7(x):
    return x+7

def isOdd(x):
    return x**50 != 0

a = [1,2,3,4,5,6,7,8,9,10]

b = list(filter(isOdd, a))

c = list(map(add7, filter(isOdd, a)))

def idofobject():
    print("id: " + callable(object))
    
idofobject()

